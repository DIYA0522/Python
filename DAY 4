Functions

We have many functions like print(), round(), range(), etc
Likewise how can we create our own functions
Name in lower case
separate by _


Defining Functions

def greet():
   print("Hello All")
   print("Welcome")

greet()

Arguments
Values inside Parenthesis is Arguments
Parameter is the input we give inside that ()
Argument is the actual value

say;
greet(first_name, last_name)
greet("john","matt")
say Parameter is firt_name
Argument is john

def greet(first_name, last_name):
    print(f"Hi, {first_name} {last_name}")
    print("Welcome Abroad")


greet("John", "Abraham")   

There are two types of functions:
1. Perform a task
2. Return a value

1.
def greet(name):
    print(f"Hi {name}")


greet("diya")


2.
def get_greeting(name):
    return f"Hi {name}"


message = get_greeting("dia")        --storing returned vaue in an obj called message
print(message)                       --can either print
file = open("content.txt", "w")      
file.write(message)
           ---Opens (or creates) a file named content.txt in write mode ("w")
              Writes "Hi dia" into it.
              (Optional best practice) You should close the file after writing:
              file.close()
✅ Or better yet, use the safer version:
    with open("content.txt", "w") as file:
    file.write(message)

What if we put greet function inside a print function

print(greet("Home"))
 it returns None
None is the return value of greet function\
None is the object that represents the absence of a value
Unless u specifically return a value, all functions return None by Default


Now return given
def greet(name):
    print(f"Hi {name}")
    return ("...")


print(greet("diya"))


Keyword Arguments

def increment(number, by):
    return number + by


print(increment(2, 1))


We can make this code more readable by setting a keyword argument

def increment(number, by):
    return number + by


print(increment(2, by=1))

Here by=1 is a Keyword Argument

It makes your code easier to read and understand — especially when there are many parameters.
Both lines do the same thing, but the second one is more explicit and readable.
In way1 order matters, value assumed based on order of arguments,
way2 its more readable by giving a keyword argument


Usually whenever a function is defined with parameters, its always required.
How to make it optional?

ex:

def increment(number, by=1):
    return number + by


print(increment(2, 2))

here parameter value is given while defining itself, so even if value not given in input, it will take that given value.
If value given along parameter, but again provided in input, the one in input is considered.

also to make any paramter optional, always place it after the reqd parameter while defining.
ex:

def increment(number, another, by=1):
    return number + by + another


print(increment(2, 2))
----------------------------------------------
*args


[] USED for Lists
() USED for tuples


def multiple(x, y):
    return x*y


print(multiple(2, 3))
---6

# What if many numbers need to be given

def multiple(*numbers):
    total = 1
    for number in numbers:
        total *= number            1*2 =2
    return total                   2*3 = 6
                                   6*4 = 24
                                   24*5 = 120
print(multiple(2, 3, 4, 5))

---120



