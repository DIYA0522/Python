Fundamentals of Python

variables used to store data in computer's memory.
ex; student_count = 1000;
intepreter will allocate a memory for this and store 1000.
so this abel can be used anytime to access this memory location.

types of data that can be stored.
Built in primitive types
Numbers
Boolean
Strings

ex; student_count = 1000      --integrer
ex; student_count = 10.34     --float
ex; is_published = True       --boolean
ex; course_name = "Python Programming"    --string

python is a case sensitive language
Accepted boolean values
False
True

triple quotes used in order to define a big message 
say
Message = """
This is an automate message
Kindly Ignore !!!
"""


Function is a reusable piece of code used to carry out tasks
Built in Functions in Python

len funtion. used to get the length of ur string
always followed by parenthesis to indicate its a function
len() -- indicating we are calling this function

some functions take additional data called arguments
these arguments are inputs to this functions

course = "Python Programming"
print(len(course)) -- will print the number of characters in that string

index of first haracter is 0

print(len(course[0]))  ---1
print(course[0])       ---P

negavtive take from the end of the string
print(course[-1])       ---g

slice / extract 
print(course[0:3])        --Pyt
print(course[0:])          --gives exact same Python Programming
print(course[:3])          --Pyt
print(course[:])           --gives exact same Python Programming

\    --escape character
escape sequences in python
\"  or \'  --escape sequence            to escape this double quote and move forward
\\         escape sequence to print a backslash 
\n    new line


name1 = "diya \"philip"
print(name)


Formatted strings

concatenated string
first = "Diya"
last = "Philip"
full = first + " " + last\
print(full)


first = "Diya"
last = "Philip"
full = first + " " + last
print(full)
Yull = f"{first} {last}"
print(Yull)
kull = f"{len(first)} {2+2}"
print(kull)

In formatted strings, you can put valid expression between the curly braces
len function is general purpose so its not limited to strings.

There are certain functions that are specific to some strings 

String Methods

course = "Python Programming"
course. 
after . many available functions will prompt, in precise terms we refer to this functions as methods

everything in python we call it as objects and objects have functions we call methods, methods we can access using . notation.
ex: we have upper to change string to upper case
msg = "hello"
print(msg.upper())
HELLO

original string not affected

print(course.upper())          --all caps
print(course.lower())          --all smalls
print(course.title())          --first letter caps
print(course.strip())          --removes any blank spaces at the begin or end of string
  --also can use as lstrip or rstrip


print(course.find("pro"))     ---finds the index of pro

when the given string is not found using find  --   -1 will come

print(course.replace("p","j"))           --replaces all p with j 
print("Pro" in course)                   --Using in operator returns whether Pro exists in the string or not as boolean value
print("pro" not in course)               --not exists


Numbers 
3 main types
integer
float
complex numbers       # a+bi             where i is the imaginary number
1+2i

standard arithemetic operators
+, -, *
print(10 / 3)                 --gives float value               
print(10 // 3)                --gives integer value of quotient
print(10 % 3)                 --Modulus operation --gives remainder
print(10 ** 3)                --LEFT TO THE POWER OF RIGHT
for all these operators there is a special operator called autgemented assignment operator
ex: x += 3

Some useful functions in python

print(round(2.7))
print(abs(-3.3))


need to import math module , which has many functions available that it supports

import math
print(math.ceil(2.3))


search python 3 math module in browser
to find all the math module functions available


open terminal using ctrl+\

for two characters to be concatenated both need to be of the same type
Type conversion - 
built in function used for it


x = input("x: ")                      --asking input from user
ðŸ‘‰ This line asks the user to enter a value.
The input() function always gives the value as a string, even if you type a number.
print(type(x))

x: will appear as a prompt in the terminal
y = int(x) + 1
ðŸ‘‰ This line does two things:
int(x) converts the userâ€™s input (which is a string) into an integer.

Example: if x was "5", then int(x) becomes 5.
It then adds 1 to that number and stores the result in y.
So y becomes 6.

print(f"x: {x}, y: {y}")
ðŸ‘‰ This line prints both values in a nice formatted way.
The f before the string lets you include variables directly inside { }.

Example output if user entered 5:
x: 5, y: 6

Falsy and Truthy values in python
#Falsy values
0
""
None

whenever we use these values in a boolean context, we get false

BUILT IN PRIMITIVE TYPES IN PYTHON

STRING
NUMBERS
BOOLEAN












 
